import { Injectable, Logger, NotFoundException } from '@nestjs/common';
import { CreateExamDto } from './dto/create-exam.dto';
import { UpdateExamDto } from './dto/update-exam.dto';
import { Exam } from './entities/exam.entity';
import { GroupService } from 'src/group/group.service';
import { CuratorService } from 'src/curator/curator.service';
import { EntityManager } from 'typeorm';
import { ExamEnum } from './enums/exam.enum';
import escapeMarkdownV2 from 'common/func/escaping';
import { Student } from 'src/student/entity/student.entity';
import { InjectBot } from 'nestjs-telegraf';
import { Telegraf } from 'telegraf';
import { Cron, CronExpression } from '@nestjs/schedule'; // <-- –∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º Cron

@Injectable()
export class ExamsService {
  constructor(
    private manager: EntityManager,
    private groupService: GroupService,
    private curatorService: CuratorService,
    @InjectBot() private readonly bot: Telegraf,
  ) {}

  logger = new Logger();
  async create(dto: CreateExamDto): Promise<Exam> {
    const group = await this.groupService.findOne(dto.group_id);
    const curator = await this.curatorService.findOne(dto.curator_id);

    const exam = await this.manager.create(Exam, {
      type: dto.type,
      semester: dto.semester,
      course: dto.course,
      discipline: dto.discipline,
      group: group,
      curator: curator,
      holding_date: dto.holding_date,
    });
    const studentsWithTelegram = exam.group.students.filter(
      (student) => !!student.telegram,
    );

    for (const student of studentsWithTelegram) {
      const res = await this.notifyStudentAboutExam(student, exam);

      this.logger.log('–û—Ç–ø—Ä–∞–≤–∏–ª');
    }
    return await this.manager.save(Exam, exam);
  }

  async findAll(type: ExamEnum): Promise<Exam[]> {
    const exams = await this.manager.find(Exam, {
      where: { type },
      relations: {
        group: {
          students: {
            telegram: true,
          },
        },
        curator: true,
      },
    });

    const THREE_DAYS_IN_MS = 3 * 24 * 60 * 60 * 1000;
    const now = new Date();

    for (const exam of exams) {
      const examDate = new Date(exam.holding_date); // –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ —É —ç–∫–∑–∞–º–µ–Ω–∞ –µ—Å—Ç—å –ø–æ–ª–µ `date`
      console.log(examDate, now.getTime());
      // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —ç–∫–∑–∞–º–µ–Ω—ã, –µ—Å–ª–∏ –æ–Ω–∏ —Ä–∞–Ω—å—à–µ —á–µ–º —á–µ—Ä–µ–∑ 3 –¥–Ω—è
      if (examDate.getTime() - now.getTime() < THREE_DAYS_IN_MS) {
        continue;
      }

      // –§–∏–ª—å—Ç—Ä—É–µ–º —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ —Å telegram
      const studentsWithTelegram = exam.group.students.filter(
        (student) => !!student.telegram,
      );

      for (const student of studentsWithTelegram) {
        const res = await this.notifyStudentAboutExam(student, exam);
        this.logger.log(`–û—Ç–ø—Ä–∞–≤–∏–ª —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Å—Ç—É–¥–µ–Ω—Ç—É ${student.first_name}`);
      }
    }

    return exams;
  }

  async findOne(id: string): Promise<Exam> {
    return await this.manager.findOneOrFail(Exam, {
      where: { id },
      relations: {
        group: {
          students: {
            telegram: true,
          },
        },
        curator: true,
      },
    });
  }

  @Cron(CronExpression.EVERY_DAY_AT_10AM)
  async handleExamNotificationsThreeDaysBefore() {
    this.logger.log('üïí [START] –ó–∞–ø—É—Å–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∑–∞ 3 –¥–Ω—è –¥–æ —ç–∫–∑–∞–º–µ–Ω–∞');

    const exams = await this.manager.find(Exam, {
      relations: {
        group: {
          students: {
            telegram: true,
          },
        },
        curator: true,
      },
    });

    this.logger.log(`üìÑ –ù–∞–π–¥–µ–Ω–æ —ç–∫–∑–∞–º–µ–Ω–æ–≤: ${exams.length}`);

    const THREE_DAYS_IN_MS = 3 * 24 * 60 * 60 * 1000;
    const now = new Date();
    this.logger.log(`üìÖ –¢–µ–∫—É—â–∞—è –¥–∞—Ç–∞: ${now.toISOString()}`);
    this.logger.log(`‚åõ –ò–Ω—Ç–µ—Ä–≤–∞–ª –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è: ${THREE_DAYS_IN_MS} –º—Å`);

    for (const exam of exams) {
      const examDate = new Date(exam.holding_date);
      const diff = examDate.getTime() - now.getTime();

      this.logger.log(
        `\nüß™ –ü—Ä–æ–≤–µ—Ä–∫–∞ —ç–∫–∑–∞–º–µ–Ω–∞: ${exam.discipline}\nüìÖ –î–∞—Ç–∞ —ç–∫–∑–∞–º–µ–Ω–∞: ${examDate.toISOString()}\n‚è± –†–∞–∑–Ω–∏—Ü–∞ –≤–æ –≤—Ä–µ–º–µ–Ω–∏: ${diff} –º—Å`,
      );

      // –î–æ–ø—É—Å—Ç–∏–º ¬±12 —á–∞—Å–æ–≤ –æ—Ç 3 –¥–Ω–µ–π
      const margin = 12 * 60 * 60 * 1000;

      if (
        diff < THREE_DAYS_IN_MS - margin ||
        diff > THREE_DAYS_IN_MS + margin
      ) {
        this.logger.log(
          '‚è≠ –≠–∫–∑–∞–º–µ–Ω –Ω–µ –ø–æ–ø–∞–¥–∞–µ—Ç –≤ –¥–∏–∞–ø–∞–∑–æ–Ω ¬±12—á –æ—Ç 3 –¥–Ω–µ–π. –ü—Ä–æ–ø—É—Å–∫–∞–µ–º.',
        );
        continue;
      }

      const studentsWithTelegram = exam.group.students.filter(
        (student) => !!student.telegram,
      );

      this.logger.log(
        `üë®‚Äçüéì –°—Ç—É–¥–µ–Ω—Ç–æ–≤ —Å Telegram: ${studentsWithTelegram.length}`,
      );

      for (const student of studentsWithTelegram) {
        this.logger.log(
          `üì® –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Å—Ç—É–¥–µ–Ω—Ç—É: ${student.last_name} ${student.first_name} (${student.telegram.telegram_id})`,
        );

        try {
          await this.notifyStudentAboutExamThree(student, exam);
          this.logger.log('‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ');
        } catch (err) {
          this.logger.error(
            `‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å—Ç—É–¥–µ–Ω—Ç—É ${student.last_name} ${student.first_name}: ${err.message}`,
          );
        }
      }
    }

    this.logger.log('‚úÖ [END] –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∑–∞ 3 –¥–Ω—è –∑–∞–≤–µ—Ä—à–µ–Ω–æ');
  }

  async notifyStudentAboutExam(student: Student, exam: Exam) {
    // –ü—Ä–æ–≤–µ—Ä–∫–∞, –µ—Å—Ç—å –ª–∏ Telegram ID
    if (!student.telegram?.telegram_id) {
      console.warn(
        `–£ —Å—Ç—É–¥–µ–Ω—Ç–∞ ${student.last_name} ${student.first_name} –Ω–µ—Ç Telegram ID`,
      );
      return;
    }

    const examDate = exam.holding_date;
    const formattedDate = examDate.toLocaleDateString('ru-RU', {
      weekday: 'long',
      year: 'numeric',
      month: 'long',
      day: 'numeric',
    });

    const message = `
üì¢ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —ç–∫–∑–∞–º–µ–Ω–µ

üë§ ${student.last_name} ${student.first_name} ${student.patronymic}
üìö –î–∏—Å—Ü–∏–ø–ª–∏–Ω–∞: ${exam.discipline}
üìÖ –î–∞—Ç–∞ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è: ${formattedDate}

${exam.link ? 'üîó –°—Å—ã–ª–∫–∞ –Ω–∞ –±–∏–ª–µ—Ç—ã' + exam.link : ''}

–£–¥–∞—á–∏ –Ω–∞ —ç–∫–∑–∞–º–µ–Ω–µ
    `;

    try {
      await this.bot.telegram.sendMessage(
        student.telegram.telegram_id,
        escapeMarkdownV2(message),
        {
          parse_mode: 'MarkdownV2',
        },
      );
      console.log(`‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å—Ç—É–¥–µ–Ω—Ç—É ${student.last_name}`);
    } catch (error) {
      console.error(
        `‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å—Ç—É–¥–µ–Ω—Ç—É ${student.last_name}: ${error.message}`,
      );
    }
  }
  async notifyStudentAboutExamThree(student: Student, exam: Exam) {
    // –ü—Ä–æ–≤–µ—Ä–∫–∞, –µ—Å—Ç—å –ª–∏ Telegram ID
    if (!student.telegram?.telegram_id) {
      console.warn(
        `–£ —Å—Ç—É–¥–µ–Ω—Ç–∞ ${student.last_name} ${student.first_name} –Ω–µ—Ç Telegram ID`,
      );
      return;
    }

    const examDate = exam.holding_date;
    const formattedDate = examDate.toLocaleDateString('ru-RU', {
      weekday: 'long',
      year: 'numeric',
      month: 'long',
      day: 'numeric',
    });

    const message = `
üì¢üì¢üì¢ –≠–∫–∑–∞–º–µ–Ω —á–µ—Ä–µ–∑ 3 –¥–Ω—è üì¢üì¢üì¢

üë§ ${student.last_name} ${student.first_name} ${student.patronymic}
üìö –î–∏—Å—Ü–∏–ø–ª–∏–Ω–∞: ${exam.discipline}
üìÖ –î–∞—Ç–∞ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è: ${formattedDate}

${exam.link ? 'üîó –°—Å—ã–ª–∫–∞ –Ω–∞ –±–∏–ª–µ—Ç—ã' + exam.link : ''}

–£–¥–∞—á–∏ –Ω–∞ —ç–∫–∑–∞–º–µ–Ω–µ
    `;

    try {
      await this.bot.telegram.sendMessage(
        student.telegram.telegram_id,
        escapeMarkdownV2(message),
        {
          parse_mode: 'MarkdownV2',
        },
      );
      console.log(`‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å—Ç—É–¥–µ–Ω—Ç—É ${student.last_name}`);
    } catch (error) {
      console.error(
        `‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å—Ç—É–¥–µ–Ω—Ç—É ${student.last_name}: ${error.message}`,
      );
    }
  }
  async addLink(id: string, link: string): Promise<void> {
    const exam = await this.manager.findOne(Exam, {
      where: { id },
      relations: {
        group: {
          students: {
            telegram: true,
          },
        },
      },
    });

    if (!exam) {
      throw new NotFoundException(`–≠–∫–∑–∞–º–µ–Ω —Å ID ${id} –Ω–µ –Ω–∞–π–¥–µ–Ω`);
    }

    exam.link = link;

    const studentsWithTelegram = exam.group.students.filter(
      (student) => !!student.telegram,
    );

    for (const student of studentsWithTelegram) {
      const res = await this.notifyStudentAboutExam(student, exam);

      this.logger.log('–û—Ç–ø—Ä–∞–≤–∏–ª');
    }
    await this.manager.save(Exam, exam);
  }

  async remove(id: string): Promise<void> {
    const exam = await this.findOne(id);
    await this.manager.remove(Exam, exam);
  }
}
